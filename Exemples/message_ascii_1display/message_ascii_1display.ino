#include <MaxMatrix.h>
#include <avr/pgmspace.h>
byte Buffer[10];
int decalage = 0;
const int DIN = 12;   // DIN pin of MAX7219 module
const int CLK = 10;   // CLK pin of MAX7219 module
const int CS = 11;    // CS pin of MAX7219 module
const int maxInUse = 1; //nbr of MAX7219 module
MaxMatrix matriceLed(DIN, CS, CLK, maxInUse);

PROGMEM const unsigned char CharAscii[] = {
  8, 8, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, // espace
  8, 8, B00000000, B00011000, B00111100, B00111100, B00011000, B00011000, B00000000, B00011000, // !
  8, 8, B00000000, B00110110, B00110110, B00010100, B00000000, B00000000, B00000000, B00000000, // ‚Äù
  8, 8, B00000000, B00110110, B00110110, B01111111, B00110110, B01111111, B00110110, B00110110, // #
  8, 8, B00000000, B00001000, B00011110, B00100000, B00011100, B00000010, B00111100, B00001000, // $
  8, 8, B00000000, B01100000, B01100110, B00001100, B00011000, B00110000, B01100110, B00000110, // %
  8, 8, B00000000, B00111100, B01100110, B00111100, B00101000, B01100101, B01100110, B00111111, // &
  8, 8, B00000000, B00011000, B00011000, B00011000, B00110000, B00000000, B00000000, B00000000, // '
  8, 8, B00000000, B00000110, B00001100, B00011000, B00011000, B00011000, B00001100, B00000110, // (
  8, 8, B00000000, B01100000, B00110000, B00011000, B00011000, B00011000, B00110000, B01100000, // )
  8, 8,  B00000000, B00000000, B00110110, B00011100, B01111111, B00011100, B00110110, B00000000, // *
  8, 8,  B00000000, B00000000, B00001000, B00001000, B00111110, B00001000, B00001000, B00000000,  // +
  8, 8,  B00000000, B00000000, B00000000, B00000000, B00110000, B00110000, B00110000, B01100000, // ,
  8, 8, B00000000, B00000000, B00000000, B00000000, B00111100, B00000000, B00000000, B00000000, // -
  8, 8, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B01100000, B01100000, // .
  8, 8, B00000000, B00000000, B00000110, B00001100, B00011000, B00110000, B01100000, B00000000, // /
  8, 8, B00000000, B00111100, B01100110, B01101110, B01110110, B01100110, B01100110, B00111100, //0
  8, 8, B00000000, B00011000, B00011000, B00111000, B00011000, B00011000, B00011000, B01111110, //1
  8, 8, B00000000, B00111100, B01100110, B00000110, B00001100, B00110000, B01100000, B01111110, //2
  8, 8, B00000000, B00111100, B01100110, B00000110, B00011100, B00000110, B01100110, B00111100, //3
  8, 8, B00000000, B00001100, B00011100, B00101100, B01001100, B01111110, B00001100, B00001100, //4
  8, 8, B00000000, B01111110, B01100000, B01111100, B00000110, B00000110, B01100110, B00111100, //5
  8, 8, B00000000, B00111100, B01100110, B01100000, B01111100, B01100110, B01100110, B00111100, //6
  8, 8, B00000000, B01111110, B01100110, B00001100, B00001100, B00011000, B00011000, B00011000, //7
  8, 8, B00000000, B00111100, B01100110, B01100110, B00111100, B01100110, B01100110, B00111100, //8
  8, 8, B00000000, B00111100, B01100110, B01100110, B00111110, B00000110, B01100110, B00111100, //9
  8, 8, B00000000, B00000000, B00011000, B00011000, B00000000, B00011000, B00011000, B00000000, // :
  8, 8, B00000000, B00000000, B00011000, B00011000, B00000000, B00011000, B00011000, B00110000, // ;
  8, 8, B00000000, B00000110, B00001100, B00011000, B00110000, B00011000, B00001100, B00000110, // <
  8, 8, B00000000, B00000000, B00000000, B00111100, B00000000, B00111100, B00000000, B00000000, // =
  8, 8, B00000000, B01100000, B00110000, B00011000, B00001100, B00011000, B00110000, B01100000, // >
  8, 8, B00000000, B00111100, B01100110, B00000110, B00011100, B00011000, B00000000, B00011000, // ?
  8, 8, B00000000, B00111000, B01000100, B01011100, B01011000, B01000010, B00111100, B00000000, // @
  8, 8,  B00000000, B00111100, B01100110, B01100110, B01111110, B01100110, B01100110, B01100110, // A
  8, 8,  B00000000, B01111100, B01100110, B01100110, B01111100, B01100110, B01100110, B01111100, // B
  8, 8, B00000000, B00111100, B01100110, B01100000, B01100000, B01100000, B01100110, B00111100, // C
  8, 8, B00000000, B01111100, B01100110, B01100110, B01100110, B01100110, B01100110, B01111100, // D
  8, 8, B00000000, B01111110, B01100000, B01100000, B01111100, B01100000, B01100000, B01111110, // E
  8, 8, B00000000, B01111110, B01100000, B01100000, B01111100, B01100000, B01100000, B01100000, // F
  8, 8, B00000000, B00111100, B01100110, B01100000, B01100000, B01101110, B01100110, B00111100, // G
  8, 8, B00000000, B01100110, B01100110, B01100110, B01111110, B01100110, B01100110, B01100110, // H
  8, 8, B00000000, B00111100, B00011000, B00011000, B00011000, B00011000, B00011000, B00111100, // I
  8, 8, B00000000, B00011110, B00001100, B00001100, B00001100, B01101100, B01101100, B00111000, // J
  8, 8, B00000000, B01100110, B01101100, B01111000, B01110000, B01111000, B01101100, B01100110, // K
  8, 8, B00000000, B01100000, B01100000, B01100000, B01100000, B01100000, B01100000, B01111110, // L
  8, 8, B00000000, B01100011, B01110111, B01111111, B01101011, B01100011, B01100011, B01100011, // M
  8, 8, B00000000, B01100011, B01110011, B01111011, B01101111, B01100111, B01100011, B01100011, // N
  8, 8, B00000000, B00111100, B01100110, B01100110, B01100110, B01100110, B01100110, B00111100, // O
  8, 8, B00000000, B01111100, B01100110, B01100110, B01100110, B01111100, B01100000, B01100000, // P
  8, 8, B00000000, B00111100, B01100110, B01100110, B01100110, B01101110, B00111100, B00000110, // Q
  8, 8, B00000000, B01111100, B01100110, B01100110, B01111100, B01111000, B01101100, B01100110, // R
  8, 8, B00000000, B00111100, B01100110, B01100000, B00111100, B00000110, B01100110, B00111100, // S
  8, 8, B00000000, B01111110, B01011010, B00011000, B00011000, B00011000, B00011000, B00011000, // T
  8, 8, B00000000, B01100110, B01100110, B01100110, B01100110, B01100110, B01100110, B00111110, // U
  8, 8, B00000000, B01100110, B01100110, B01100110, B01100110, B01100110, B00111100, B00011000, // V
  8, 8, B00000000, B01100011, B01100011, B01100011, B01101011, B01111111, B01110111, B01100011, // W
  8, 8, B00000000, B01100011, B01100011, B00110110, B00011100, B00110110, B01100011, B01100011, // X
  8, 8, B00000000, B01100110, B01100110, B01100110, B00111100, B00011000, B00011000, B00011000, //Y
  8, 8, B00000000, B01111110, B00000110, B00001100, B00011000, B00110000, B01100000, B01111110, // Z
  8, 8, B00000000, B00011110, B00011000, B00011000, B00011000, B00011000, B00011000, B00011110, // [
  8, 8, B00000000, B00000000, B01100000, B00110000, B00011000, B00001100, B00000110, B00000000, // under slash
  8, 8, B00000000, B01111000, B00011000, B00011000, B00011000, B00011000, B00011000, B01111000, // ]
  8, 8, B00000000, B00001000, B00010100, B00100010, B01000001, B00000000, B00000000, B00000000, // ^
  8, 8, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00111100, // _
  8, 8, B00000000, B00001100, B00001100, B00000110, B00000000, B00000000, B00000000, B00000000, // `
  8, 8, B00000000, B00000000, B00000000, B00111100, B00000110, B00111110, B01100110, B00111110, // a
  8, 8, B00000000, B01100000, B01100000, B01100000, B01111100, B01100110, B01100110, B01111100, // b
  8, 8, B00000000, B00000000, B00000000, B00111100, B01100110, B01100000, B01100110, B00111100, // c
  8, 8, B00000000, B00000110, B00000110, B00000110, B00111110, B01100110, B01100110, B00111110, // d
  8, 8, B00000000, B00000000, B00000000, B00111100, B01100110, B01111110, B01100000, B00111100, // e
  8, 8, B00000000, B00011100, B00110110, B00110000, B00110000, B01111100, B00110000, B00110000, // f
  8, 8, B00000000, B00000000, B00111110, B01100110, B01100110, B00111110, B00000110, B00111100, // g
  8, 8, B00000000, B01100000, B01100000, B01100000, B01111100, B01100110, B01100110, B01100110, // h
  8, 8, B00000000, B00000000, B00011000, B00000000, B00011000, B00011000, B00011000, B00111100, // i
  8, 8, B00000000, B00001100, B00000000, B00001100, B00001100, B01101100, B01101100, B00111000, // j
  8, 8, B00000000, B01100000, B01100000, B01100110, B01101100, B01111000, B01101100, B01100110, // k
  8, 8, B00000000, B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, // l
  8, 8, B00000000, B00000000, B00000000, B01100011, B01110111, B01111111, B01101011, B01101011, // m
  8, 8, B00000000, B00000000, B00000000, B01111100, B01111110, B01100110, B01100110, B01100110, // n
  8, 8, B00000000, B00000000, B00000000, B00111100, B01100110, B01100110, B01100110, B00111100, // o
  8, 8, B00000000, B00000000, B01111100, B01100110, B01100110, B01111100, B01100000, B01100000, // p
  8, 8, B00000000, B00000000, B00111100, B01101100, B01101100, B00111100, B00001101, B00001111, // q
  8, 8, B00000000, B00000000, B00000000, B01111100, B01100110, B01100110, B01100000, B01100000, // r
  8, 8, B00000000, B00000000, B00000000, B00111110, B01000000, B00111100, B00000010, B01111100, // s
  8, 8, B00000000, B00000000, B00011000, B00011000, B01111110, B00011000, B00011000, B00011000, // t
  8, 8, B00000000, B00000000, B00000000, B01100110, B01100110, B01100110, B01100110, B00111110, // u
  8, 8, B00000000, B00000000, B00000000, B00000000, B01100110, B01100110, B00111100, B00011000, // v
  8, 8, B00000000, B00000000, B00000000, B01100011, B01101011, B01101011, B01101011, B00111110, // w
  8, 8, B00000000, B00000000, B00000000, B01100110, B00111100, B00011000, B00111100, B01100110, // x
  8, 8, B00000000, B00000000, B00000000, B01100110, B01100110, B00111110, B00000110, B00111100, // y
  8, 8, B00000000, B00000000, B00000000, B00111100, B00001100, B00011000, B00110000, B00111100, // z
  8, 8, B00000000, B00001110, B00011000, B00011000, B00110000, B00011000, B00011000, B00001110, // {
  8, 8, B00000000, B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, B00011000, // |
  8, 8, B00000000, B01110000, B00011000, B00011000, B00001100, B00011000, B00011000, B01110000, // }
  8, 8, B00000000, B00000000, B00000000, B00111010, B01101100, B00000000, B00000000, B00000000, // ~
};

char message[] = "Hello, I Love Arduino!   "; //Ecrire votre message √† scroller

void setup() {
  matriceLed.init();
  matriceLed.setIntensity(2);
}

void printChar(char c, int dureeDelay)
{
  if (c < 32) return;
  c -= 32;
  memcpy_P(Buffer, CharAscii + 10 * c, 10);
  matriceLed.writeSprite(0, 0, Buffer);
  delay(dureeDelay);
}

void printString(char* s, int dureeDelay)
{
  while (*s != 0)
  {
    printChar(*s, dureeDelay);
    s++;
  }
}

void loop() {
  delay(500);
  printString(message, 500);
}
